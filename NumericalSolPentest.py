import math
import numpy as np
import matplotlib.pyplot as plt
import Constants

#Inital conditions
t0 = 0
tf = 100
theta0 = 0.1
L = 9.81
thetadot0 = 0
h = 0.01
n = (tf-t0)//h
n = int(n)
state =  np.array([theta0, thetadot0])
t = np.linspace(t0,tf,n)
theta = np.zeros([n])
thetar = np.zeros([n])
thetadotr = np.zeros([n])
thetae = np.zeros([n])
thetadote = np.zeros([n])
print('t',t)
#Exact Solution
theta[0] = theta0
for j in range(1,n):
    theta[j] = theta0*math.cos(math.sqrt(Constants.g/L)*t[j])
print ('Real',theta)

#Euler
thetadote[0] = thetadot0
thetae[0] = theta0

for j in range(1,n):
    thetadote[j] = h*((-Constants.g/L)*thetae[j-1]) + thetadote[j-1]
    thetae[j] = h*(thetadote[j-1]) + thetae[j-1]
print('Euler',thetae)

#RK4
def Pendulum(t, state):
    thetark, thetadotrk = state
    return np.array([thetadotrk,(-Constants.g/L)*thetark])


def rk4(x, h, y, f):
    k1 = h * f(x, y)
    k2 = h * f(x + 0.5*h, y + 0.5*k1)
    k3 = h * f(x + 0.5*h, y + 0.5*k2)
    k4 = h * f(x + h, y + k3)
    return x + h, y + (k1 + 2*(k2 + k3) + k4)/6.0

timed = 0
thetar[0] = theta0
for jr in range(1,n):
    timed, state = rk4(timed, h, state, Pendulum)
    thetar[jr] = state[0]

print('theta', thetar)

ExactError = ((theta-theta))
print('Exact Error', ExactError)
EulerError = ((thetae-theta))
print('Euler Error', EulerError)
RungeError =((thetar-theta))
print('Runge-Kutta Error',RungeError)

plt.figure(1)
plt.plot(t,theta, 'r-')
plt.plot(t,thetae, 'y-')
plt.plot(t,thetar, 'b-')
axes = plt.gca()
axes.set_xlim([0, tf])
axes.set_ylim([-0.8,0.8])
plt.xlabel("Time (seconds)")
plt.ylabel("Theta (radians)")
plt.title("Exact Pendulum Solution")
plt.grid()

plt.figure(2)
plt.plot(t,ExactError, 'r-')
plt.plot(t,EulerError, 'y-')
plt.plot(t,RungeError, 'b-')
axes = plt.gca()
axes.set_xlim([0, tf])
axes.set_ylim([-0.01,0.01])
plt.xlabel("Time (seconds)")
plt.ylabel("Percentage Error")
plt.title("Error Comparison Pendulum")
plt.grid()
plt.show()
